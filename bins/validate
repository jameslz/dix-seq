#!/usr/bin/perl -w

use strict;
use warnings;
use File::Basename;
use Cwd 'abs_path';

die "Usage:perl $0 <metadata>" if(@ARGV != 1);

my ($config)        =  @ARGV;
my  %metadata       =  ();
my  @samples_t      =  ();

print_para();
mapping_file();
inspect();

exit;

sub print_para {

    print qq{metadata:\n};

    open( PROFILE,  $config )   || die "[ERR]: can't open $config. \n";
    while(<PROFILE>){
      
        $_ =~ s/\s+$//;
        next if(/^#/ || !/^\S+/);
        my ($key,  $value)  = $_ =~ /^(\S+)\s+(.+)/;
        $metadata{$key}  = $value;

    } 
    close PROFILE;
    
    print qq{\n\n[1]: check parameter available:\n\n};


    foreach my $para (qw/project_home project_id raw_data mapping_file cpus parallel threads trim_param mergepairs_param search_pcr_param db maxee unoise3_param reference sintax_cutoff filter tree rarefaction text pathway vegdist/) {
        
        if(exists $metadata{$para}){
            print qq{parameter:[$para]\t[$metadata{$para}]\t\e[1;41mPASS\e[0m\n};
        }else{
            print qq{parameter:[$para]\t[]\t\e[1;45mNot available\e[0m\n};
        }
    
    }
    
    print qq{\n\n[2]: check path available:\n\n};

    foreach my $para (qw/project_home  raw_data mapping_file/) {
        
        if(exists $metadata{$para} && -e $metadata{$para}){
            print qq{parameter:[$para]\tpath:[$metadata{$para}]\t\e[1;41mPASS\e[0m\n};
        }else{
            print qq{parameter:[$para]\tpath:[$metadata{$para}]\t\e[1;45mNot available\e[0m\n};
        }
    
    }

}

sub mapping_file {
    
    open (PROFILE, qq{$metadata{mapping_file}})   || die "[ERR]: can't open $metadata{mapping_file}. \n";
    while (<PROFILE>) {
        
        $_ =~ s/\s+$//;
        next if (/^#/ || /^$/);
        my @its = split /\s+/, $_;
        push @samples_t, $its[0];
    
    }
    close PROFILE;

}

sub inspect {

    my $rt     = 0;
    my $sample = $samples_t[0];
    my $t      = 'fastq.gz';

    foreach my $p (qw/fq fq.gz fastq fastq.gz/) {
        my $fp = qq{$metadata{raw_data}/$sample\_1.$p};
        if(-e $fp){
            $t = $p;
            ++$rt;
            last;
        }
    }

    if(! $rt){
        print STDERR qq{[ERR]: can't get any sequence format for sample: $sample;\n};
        exit;
    }


    print qq{\n\n[3]: check reads available:\n\n};

    foreach my $s ( @samples_t ) {
        
        my $fp = qq{$metadata{raw_data}/$s\_1.$t};
        my $rp = qq{$metadata{raw_data}/$s\_2.$t};

        my $q  = 0;
        $q++ if(-e $fp);
        $q++ if(-e $rp);

        if($q != 2){
            print qq{$s:\t$fp,$rp\t\e[1;45mFail\e[0m\n};
        }else{
            print qq{$s:\t$fp,$rp\t\e[1;41mPASS\e[0m\n};
        }

    }

    print qq{\n\n};

}