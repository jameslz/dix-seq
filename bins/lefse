#!/usr/bin/perl -w

use strict;
use warnings;
use File::Basename;
use Cwd 'abs_path';
use Getopt::Std;
use Switch;

die "Usage:perl $0 <config>" if(@ARGV != 1);

my ( $config )      = @ARGV;

my  %metadata       = ();
profiling();

my  $project_home   =  qq{$metadata{project_home}/$metadata{project_id}/lefse};

my  $profiles       =  qq{$project_home/profiles};
my  $runs           =  qq{$project_home/runs};
my  $report         =  qq{$project_home/report};
my  $analysis       =  qq{$project_home/analysis};
my  $stats          =  qq{$project_home/stats};

my  $utils          =  dirname( abs_path($0) ) . '/../utils';
my  $binaries       =  dirname( abs_path($0) ) . '/../binaries';
my  $vtype          =  ();

my  @samples_t      =  ();


my  $dry_run        =  0;
    $dry_run        =  1 if(exists $metadata{dry_run} && $metadata{dry_run} eq 'T');

my  $classify       = qq{$metadata{project_home}/$metadata{project_id}/classify/zotus};

my  $kit            =  dirname( abs_path($0) ) . '/../thirdpart/lefse-kit-0.0.1/lefse-kit';
my  $lefse_para     =  $metadata{lefse_para};

submit();
exit;

sub submit {

    mapping_file();
    make_fs();
    metadata_run();
    abund_run();
    lefse_run();

}

sub profiling {

    open( PROFILE,  $config ) || die "[ERR]: can't open $config $!\n";
    while(<PROFILE>){
        
        $_ =~ s/\s+$//;
        next if(/^#/ || !/^\S+/);
        my ($key, $value)  = $_ =~ /^(\S+)\s+(.+)/;
        next if($value eq '-');
        $metadata{$key}  = $value;

    } 
    close PROFILE;

    foreach my $it (qw/lefse_para/){

        if(!exists $metadata{$it} ){
           print STDERR qq{[ERR]: not provide the $it information!\n};
           exit;
        }

    }

}

sub mapping_file {

  my %samples_h  = ();
  open (PROFILE, qq{$metadata{mapping_file}})  || die "[ERR]: can't open $metadata{mapping_file} $!\n";
  while (<PROFILE>) {
      
        $_ =~ s/\s+$//;
        next if (/^#/);
        my @its = split /\t/, $_;
        push @samples_t, $its[0];

  }
  close PROFILE;

}

sub make_fs {
    
    my $cmd = qq{mkdir -p  $runs
                           $analysis
                           $profiles
                           $stats};
       $cmd =~ s/\n\s+/ /msg;
    system $cmd;

}

sub metadata_run {
    
    my $sh = qq{$runs/metadata.sh};
    open(EXPORT, qq{>$sh} ) || die "[ERR]: can't open $sh $!";
   
    print EXPORT qq{$binaries/tsv-utils strip  $metadata{mapping_file} |cut -f1,2 | grep -v '#' >$stats/metadata.txt;\n};
    
    close EXPORT;
    system qq{cat $sh | $binaries/gargs -v --nlines 1 -p 1 "{}"\n} if(!$dry_run);

}

sub abund_run {

    my $sh   =  qq{$runs/abund.sh};
    open (EXPORT, ">$sh") || die "[ERR]: can't open $sh $!\n";
    
    print EXPORT otu_lefse();

    close EXPORT;
    system  qq{cat $sh | $binaries/gargs -v  -nlines 1 -p 1 "{}"} if(!$dry_run);

}

sub otu_lefse{

    my $cmd     = qq{$binaries/atlas-utils hierarchy         \
                        $classify/zotu_table_freqs_ann.txt   \
                     >$profiles/zotu_table.txt ;\n};
       $cmd    =~ s/\s+\n\s+/ /msg;
    return $cmd;
}

sub lefse_run {

    my $sh   =  qq{$runs/lefse.sh};
    open (EXPORT, ">$sh") || die "[ERR]: can't open $sh $!\n";

    
    my $fn = qq{$profiles/zotu_table.txt};
    my $fm = qq{$stats/metadata.txt};
    print EXPORT lefse( $fn, $fm );
    print EXPORT qq{mv $analysis/report $report ;\n};

    close EXPORT;
    system  qq{cat $sh | $binaries/gargs -v -nlines 1 -p 1 "{}"} if(!$dry_run);
}

sub lefse {
    
    my ($fn, $fm, $fo) = @_;
    my $cmd = qq{$kit                   \
                    -r 0.1              \
                    $lefse_para         \
                    $fn $fm $analysis ;\n};
       $cmd =~ s/\s+\n\s+/ /msg;
    return $cmd;

}
