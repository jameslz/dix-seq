#!/usr/bin/perl -w

use strict;
use warnings;
use Getopt::Std;
use File::Basename;
use Cwd 'abs_path';

my $version = "0.0.2";

my %opts = (q =>'0.05',
            f => 1,
            r => 0.1,
            l => 'T',
            t => 40);

getopts('q:t:pf:r:l:', \%opts);

&usage if (-t STDIN && @ARGV != 4);

my  $counts         =  shift @ARGV;
my  $norm           =  shift @ARGV;
my  $mapping_file   =  shift @ARGV;
my  $project_home   =  abs_path(shift @ARGV);

my  $runs           =  qq{$project_home/runs};
my  $data           =  qq{$project_home/data};
my  $report         =  qq{$project_home/report};

my  $binaries       =  dirname( abs_path($0) ) . '/binaries';
my  $utils          =  dirname( abs_path($0) ) . '/utils';

my  $qval           =  $opts{q};
my  $cpus           =  $opts{t};
my  $c              =  ($opts{p}) ? -2 : -1;
my  $fold           =  $opts{f};
my  $rowsum         =  $opts{r};
my  $text           =  $opts{l};

my  @elements_t     =  ();
my  %pairwise_h     =  ();
my  $pairwise_z     =  0;
my  %catalog_h      =  ();
my  $label          =  ();
my  %fid_h          =  ();

submit();
exit;

sub submit {

    make_fs();
    validate_run();
    mapping_file();
    DESeq2_run();
    violin_run();

}

sub make_fs {

    my $cmd = qq{mkdir -p  $runs 
                           $data
                           $report/{violin,volcano}};
       $cmd =~ s/\n\s+/ /msg;
    system $cmd;

}

sub validate_run {

    my $sh    =  qq{$runs/validate.sh};
    open (EXPORT, ">$sh") || die "[ERR]: can't open $sh $!\n";

    print EXPORT validate();
    print EXPORT count_table();
    print EXPORT norm_table();

    close EXPORT;
    system qq{bash $sh};

}

sub validate {

    my $cmd  = qq{$binaries/validate               \
                    $mapping_file $counts          \
                  1>$data/metadata.txt             \
                  2>$data/validate.txt ;\n};
       $cmd  =~ s/\s+\n\s+/ /msg; 
    return $cmd;

}

sub count_table {

    my $cmd =  qq{cut -f1 $data/metadata.txt       \
                  |$binaries/tsv-utils subcolumn   \
                    -r $counts -                   \
                  |$binaries/text-clean -          \
                  |$binaries/tsv-utils groupline   \
                     $data/metadata.txt -          \
                  >$data/counts.txt; \n};
       $cmd =~ s/\s+\n\s+/ /msg; 
    return $cmd;

}

sub norm_table {

    my $cmd =  qq{cut -f1 $data/metadata.txt       \
                  |$binaries/tsv-utils subcolumn   \
                    -r $norm -                     \
                  |$binaries/text-clean -          \
                  |$binaries/tsv-utils trim        \
                    - $rowsum                      \
                  |$binaries/tsv-utils groupline   \
                     -r                            \
                     $data/metadata.txt -          \
                  >$data/norm.txt; \n};
       $cmd =~ s/\s+\n\s+/ /msg; 
    return $cmd;

}

sub mapping_file {

    open( PROFILE,  qq{$data/metadata.txt} )   || die "[ERR]: can't open $data/metadata.txt;\n";

    my $head;
    ($label, $head) = split /\t/, <PROFILE>, 2; 
    my @catalog_t  = ();

    while(<PROFILE>){

        $_=~s/\s+$//;        
        my @t = split /\t/, $_;
       
        if(!exists $catalog_h{ $t[-1] }){
            push @catalog_t, $t[-1];
        }

        push @{$catalog_h{ $t[-1] } } , $t[0];

    } 
    close PROFILE;

    for(my $i = 0; $i < $#catalog_t; ++$i){
        for(my $j = $i + 1; $j <= $#catalog_t; ++$j){
            @{$pairwise_h{ $pairwise_z } } = ($catalog_t[ $i ], $catalog_t[ $j ]); 
            $pairwise_z++;
        } 
    }

}

sub DESeq2_run {

    my $sh    =  qq{$runs/DESeq2.sh};
    open (EXPORT, ">$sh") || die "[ERR]: can't open $sh $!\n";

    for(my $z = 0; $z < $pairwise_z; ++$z){
        my $q = $pairwise_h{$z}[0];
        my $s = $pairwise_h{$z}[1];
        print EXPORT DESeq2($q, $s);
        print EXPORT annotation($q, $s);
        print EXPORT volcano($q, $s);
        print EXPORT pdf2png( qq{$report/volcano/$q\_$s.pdf} );

    }
    
    close EXPORT;
    system  qq{cat $sh | $binaries/gargs -v  -nlines 4 -p $cpus "{}"};

}

sub DESeq2 {

    my $q = shift;
    my $s = shift;

    my $cmd = qq{$utils/DESeq2.R                     \
                    $data/counts.txt                 \
                    $q $s                            \
                    $report/$q\_$s ;\n};
       $cmd =~ s/\s+\n\s+/ /msg;
   return $cmd;

}

sub annotation {
    
    my $q = shift;
    my $s = shift;

    my $cmd = qq{$utils/DESeq2-utils annotation      \
                    $report/$q\_$s.txt               \
                    $qval                            \
                    $fold                            \
                >$report/volcano/$q\_$s.txt ;\n};
       $cmd =~ s/\s+\n\s+/ /msg;
    return $cmd;

}

sub volcano {

    my $q = shift;
    my $s = shift;

    my $cmd = qq{$utils/Volcano.R                   \
                    -t $text                        \
                    $report/volcano/$q\_$s.txt      \
                    $q $s                           \
                    $report/volcano/$q\_$s.pdf      \
                    $qval                           \
                    $fold;\n};
       $cmd =~ s/\s+\n\s+/ /msg;
   return $cmd;

}

sub violin_run {

    my $sh = qq{$runs/violin.sh};
    open (EXPORT, ">$sh") || die "[ERR]: can't open $sh $!\n";
    
    load_elements();
    elements_tabs();

    foreach my $e ( @elements_t ) {
       print EXPORT feature_tab( $e );
       print EXPORT violin( $e );
       print EXPORT pdf2png( qq{$report/violin/$e.pdf} );
    }

    close EXPORT;
    system qq{cat $sh | $binaries/gargs -v --nlines 3 -p $cpus "{}"\n};

}

sub load_elements {

    open( DATA, qq{$data/norm.txt} )  || die "[ERR]: can't open $data/norm.txt \n";
    while(<DATA>){
        
        $_=~s/\s+$//;
        my @t = split /\t/, $_;
        $fid_h{ $t[0] } = ();
    
    }
    close DATA;

}

sub elements_tabs {

    my %elements_h = ();
    for(my $z = 0; $z < $pairwise_z; ++$z){
       
        my $q  = $pairwise_h{$z}[0];
        my $s  = $pairwise_h{$z}[1];
        my $fn = qq{$report/$q\_$s.txt};
        open( DATA, $fn )   || die "[ERR]: can't open $fn \n";
        <DATA>;
        while(<DATA>){
            $_=~s/\s+$//;
            my @t = split /\t/, $_;
            next if( $t[0] =~/Above_/ );
            next if( $t[$c] eq "NA");
            next if( $t[$c] > $qval); 
            next if(! exists $fid_h{ $t[0] } );
            $elements_h{ $t[0] } = ();
         } 
        close DATA;
    }    
    @elements_t = keys %elements_h;

}

sub feature_tab {

    my $e   = shift;
    my $cmd = qq{$binaries/tsv-utils subset         \
                    -k -c 1                         \
                    $data/norm.txt                  \
                    $e                              \
                >$report/violin/$e.txt;\n};
       $cmd =~ s/\s+\n\s+/ /msg;
    return $cmd;

}

sub violin {

    my $e   = shift;
    my $cmd = qq{$utils/Violin.R                    \
                    $report/violin/$e.txt           \
                    $data/metadata.txt              \
                    $report/violin/$e.pdf           \
                    $e;\n};
       $cmd =~ s/\s+\n\s+/ /msg;
    return $cmd;

}

sub pdf2png {

    my $fn  = shift;
    my $cmd = qq{$utils/pdf2png $fn;\n};
    return $cmd;   

}


sub usage {

  printf STDERR qq(

Program: DESeq2-kit: DESeq2 analysis.
Version: $version
Contact: ZHANG LEI <zhanglei\@logictek.cn>\n
Usage:   DESeq2-kit <count_table> <norm_table> <mapping_file> <project>\n
Options: -t INT   cpus for parallel, default: [40]
         -q INT   Pval/Padj cutoff for visualization, default: [0.05]
         -f FLOAT log2fold change, default: [1]
         -l       Label for text, default: [T]
         -p       use Pvalue replace Padj for violin visualization.
         -r FLOAT remove features rowsum cutoff, default: [0.1]

);
exit;

}
